generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model auth_code {
//   id        Int     @id @default(autoincrement())
//   auth_code String? @db.VarChar(255)
// }

//* New AuthCode Model
model AuthCode {
  id        String  @id @default(uuid())
  authCode  String? @default(uuid()) @map("auth_code")
  roleLevel Int?    @default(0) @map("role_level")

  @@map("auth_codes")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
// model user {
//   id            String          @id @db.VarChar(255)
//   username      String?         @db.VarChar(255)
//   email         String?         @db.VarChar(255)
//   password      String?         @db.VarChar(255)
//   full_name     String?         @db.VarChar(255)
//   phone_number  String?         @db.VarChar(11)
//   age           Int?            @db.SmallInt
//   type          String?         @default("1") @db.VarChar(255)
//   refresh_token String?         @db.Text
//   display_name  String?         @db.VarChar(255)
//   created_at    DateTime?       @db.DateTime(0)
//   updated_at    DateTime?       @db.DateTime(0)
//   avatar        String?         @db.Text
//   is_active     Int             @default(0)
//   is_banned     Int             @default(0)
//   user_type     user_type?      @relation(fields: [type], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "type_user_type_id")
//   user_sessions user_sessions[]

//   @@index([type], map: "type_user_type_id")
// }

//* New User Model

model User {
  id             String    @id @default(uuid())
  username       String    @unique
  email          String    @unique
  bio            String?   @db.VarChar(1000)
  fullName       String    @map("full_name")
  password       String?
  displayName    String?   @map("display_name")
  type           String
  phoneNumber    String?   @map("phone_number")
  age            Int?
  refreshToken   String?   @map("refresh_token")
  avatar         String?
  coverImage     String?   @map("cover_image")
  isActive       Boolean?  @default(false) @map("is_active")
  isVerified     Boolean?  @default(false) @map("is_verified")
  isBanned       Boolean?  @default(false) @map("is_banned")
  createdAt      DateTime? @default(now()) @map("created_at")
  updatedAt      DateTime? @default(now()) @updatedAt @map("updated_at")
  credits        Decimal?  @default(0) @db.Decimal(10, 2)
  postCount      Int       @default(0) @map("post_count")
  followerCount  Int       @default(0) @map("follower_count")
  followingCount Int       @default(0) @map("following_count")

  userType     UserType       @relation(fields: [type], references: [id], onDelete: Restrict)
  UserSession  UserSession[]
  ActiveCode   ActiveCode[]
  post         Post[]
  postLike     PostLike[]
  following    Follow[]       @relation("Following")
  followers    Follow[]       @relation("Followers")
  comments     PostComment[]
  Notification Notification[]

  @@index([username, email, type])
  @@map("users")
}

// model user_type {
//   id        String  @id @db.VarChar(255)
//   type_name String? @db.VarChar(255)
//   user      user[]
// }

//* New User Type Model

model UserType {
  id       String  @id @default(uuid())
  typeName String? @map("type_name")
  User     User[]

  @@map("user_types")
}

// model user_sessions {
//   id            BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
//   user_id       String   @db.VarChar(255)
//   token         String   @db.Text
//   ip_address    String   @db.VarChar(45)
//   user_agent    String?  @db.Text
//   payload       String?  @db.Text
//   last_activity DateTime @default(now()) @db.Timestamp(0)
//   created_at    DateTime @default(now()) @db.Timestamp(0)
//   expires_at    DateTime @default(now()) @db.Timestamp(0)
//   user          user     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "user_id_index")

//   @@index([last_activity], map: "last_activity_index")
//   @@index([user_id], map: "user_id_index")
// }

//* New UserSessions
model UserSession {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  token        String   @unique()
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  payload      String?
  lastActivity DateTime @default(now()) @map("last_activity")
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @default(now()) @map("expires_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, lastActivity, token])
  @@map("user_sessions")
}

model ActiveCode {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  code      String   @unique
  isActive  Boolean  @default(false)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@map("active_codes")
}

model Post {
  id           String   @id @default(uuid())
  content      String   @db.VarChar(8000)
  authorId     String   @map("author_id")
  isPrivate    Boolean  @map("is_private")
  likeCount    Int      @default(0) @map("like_count")
  commentCount Int      @default(0) @map("comment_count")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  author   User          @relation(fields: [authorId], references: [id], onDelete: Restrict)
  likes    PostLike[]
  comments PostComment[]

  @@index([authorId, createdAt])
  @@map("posts")
}

model PostLike {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  // @@unique([userId, postId])
  @@index([userId, postId])
  @@map("post_likes")
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  follower  User @relation("Following", fields: [followerId], references: [id], onDelete: Restrict)
  following User @relation("Followers", fields: [followingId], references: [id], onDelete: Restrict)

  @@unique([followerId, followingId])
  @@index([followerId, followingId])
  @@map("follows")
}

model PostComment {
  id           String   @id @default(uuid())
  content      String   @db.VarChar(3000)
  postId       String   @map("post_id")
  authorId     String   @map("author_id")
  replyToId    String?  @map("reply_to_id")
  repliesCount Int      @default(0) @map("replies_count")
  level        Int      @default(0) @map("level")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  post    Post          @relation(fields: [postId], references: [id], onDelete: Restrict)
  author  User          @relation(fields: [authorId], references: [id], onDelete: Restrict)
  replyTo PostComment?  @relation("CommentReplies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies PostComment[] @relation("CommentReplies")

  @@index([postId, authorId, replyToId, createdAt])
  @@map("post_comments")
}

model Notification {
  id         String   @id @default(uuid())
  receiverId String   @map("receiver_id")
  typeId     String   @map("type_id")
  isRead     Boolean  @default(false) @map("is_read")
  createdAt  DateTime @default(now()) @map("created_at")

  receiver User             @relation(fields: [receiverId], references: [id], onDelete: NoAction)
  type     NotificationType @relation(fields: [typeId], references: [id], onDelete: Restrict)

  @@map("notifications")
}

model NotificationType {
  id           String         @id @default(uuid())
  type         String
  Notification Notification[]

  @@map("notification_types")
}
